{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"PlayerContainerProficiency=30;PlayerContainerOptimization=0;LowLevel=25;HighLevel=50;ContainerMatch=\"C_(.+)\"OverflowMatch=\"O_(.+)\"ContRowsPerScreen=20;AssemRowsPerScreen=16;AlertRowsPerScreen=24;AlignTop=false;WaitingAsAlarm=false;KeepBlocksTogether=false;DataThrottle=15;SkipHeadings=false;US_Spellings=false;contGap=1.33;prodGap=0.4;assemFontSize=100/AssemRowsPerScreen-prodGap;contFontSize=100/ContRowsPerScreen-contGap;properties={Bauxite={density=1.2808,ore=true},Coal={density=1.3465,ore=true},Quartz={density=2.6498,ore=true},Hematite={density=5.0398,ore=true},Chromite={density=4.54,ore=true},Malachite={density=3.9997,ore=true},Limestone={density=2.7105,ore=true},Natron={density=1.5499,ore=true},Petalite={density=2.4119,ore=true},Garnierite={density=2.6,ore=true},Acanthite={density=7.1995,ore=true},Pyrite={density=5.0098,ore=true},Cobaltite={density=6.33,ore=true},Cryolite={density=2.9495,ore=true},Kolbeckite={density=2.37,ore=true},GoldNuggets={density=19.3,ore=true,short=\"GoldNug\"},Rhodonite={density=3.76,ore=true},Columbite={density=5.38,ore=true},Illmenite={density=4.55,ore=true},Vanadinite={density=6.95,ore=true},Hydrogen={density=0.069785,short=\"H₂\"},Oxygen={density=1.0000,short=\"O₂\"},Aluminium={density=2.7,short=\"Al\",usSpelling=\"Aluminum\"},Carbon={density=2.27,short=\"C\"},Silicon={density=2.33,short=\"Si\"},Iron={density=7.85,short=\"Fe\"},Calcium={density=1.55,short=\"Ca\"},Chromium={density=7.19,short=\"Cr\"},Copper={density=8.96,short=\"Cu\"},Sodium={density=0.97,short=\"Na\"},Lithium={density=0.53,short=\"Li\"},Nickel={density=8.91,short=\"Ni\"},Silver={density=10.49,short=\"Ag\"},Sulfur={density=1.82,short=\"S\"},Cobalt={density=8.9,short=\"Co\"},Fluorine={density=1.7,short=\"Fl\"},Gold={density=19.3,short=\"Au\"},Scandium={density=2.98,short=\"Sc\"},Manganese={density=7.21,short=\"Mn\"},Niobium={density=8.57,short=\"Ni\"},Titanium={density=4.51,short=\"Ti\"},Vanadium={density=6.00,short=\"Va\"},Silumin={density=3.00},Steel={density=8.05},AlFe={density=7.50},AlLi={density=2.50},CaRefCu={density=8.10},CuAg={density=9.20},Duralumin={density=2.80},[\"Stainless steel\"]={density=7.75,short=\"S.Steel\"},Polycarbonate={density=1.4,short=\"Polycarb\"},Polycalcite={density=1.5,short=\"Polycalc\"},Polysulfide={density=1.6,short=\"Polysulf\"},Fluoropolymer={density=1.65,short=\"Fl.Poly\"}}local a={[\"electronics industry\"]=\"Elec. ind.\",[\"chemical industry\"]=\"Chem. ind.\",[\"metalworks industry\"]=\"Met. ind.\"}function slotValid(b)return b and type(b)==\"table\"and type(b.export)==\"table\"and b.getElementClass end;local c={}local d={}local e={}function onStart()function setMessage(f,g)local h=[[<div style=\"width:100vw\"><div style=\"margin-top: 20vw;padding: 10vw; font-size: 4em;width: 100vw;display: inline-block;\">]]..g..[[</div></div>]]f.setHTML(h)end;for i,b in pairs(unit)do if slotValid(b)then if b.setHTML then b.activate()setMessage(b,\"If you see this you need to rename the screens...\")elseif not databank and b.getStringValue then databank=b;databank.setIntValue(\"master\",1)elseif not core and b.getConstructId then core=b end end end;if not core then return end;for i,b in pairs(unit)do if slotValid(b)then if b.setHTML then local j=b.getId()if j then local k=core.getElementNameById(j)local type,l=string.match(k,\"(.*)Display(%d)\")if type and l then l=tonumber(l)if type==\"Cont\"then if c[l]then table.insert(c[l],b)else c[l]={b}end;setMessage(b,\"If you see this you may need to restart the master board\")elseif type==\"Prod\"then if d[l]then table.insert(d[l],b)else d[l]={b}end;setMessage(b,\"If you see this you may need to restart the master board\")end end end end end end;function extractSubstanceName(k,m)local n=string.gsub(k,m,\"\")return n end;function getBaseCointainerProperties(j)local o=core.getElementMaxHitPointsById(j)if o<=123 then return 0.0,0.0 elseif o<=998 then return 229.09,1000.0 elseif o<=7996 then return 1281.31,8000.0 elseif o<=17315 then return 7421.35,64000.0 else return 14842.7,128000.0 end end;function addContainer(j)if not core.getElementTypeById(j)==\"container\"then return end;local k=core.getElementNameById(j)if not k then return end;local p=false;local n=string.match(k,\"^\"..ContainerMatch)if not n then n=string.match(k,\"^\"..OverflowMatch)if not n then return end;p=true end;local q=properties[n]if not q then return end;local r,s=getBaseCointainerProperties(j)capacity=s*(1.0+PlayerContainerProficiency/100)e[j]={name=k,id=j,substance=n,capacity=capacity,selfMass=r,property=q,overflow=p,isHub=s==0}end;local t=core.getElementIdList()for u,j in ipairs(t)do addContainer(j)end end;local v={\"XS\",\" S\",\" M\",\" L\",\"XL\"}function assemblySize(j)local w=core.getElementMassById(j)local x=math.floor(math.log(w-90,10)+0.1)return x,v[x]end;tolColours={blue=\"#332288\",cyan=\"#66CCEE\",green=\"#228833\",yellow=\"#CCBB44\",red=\"#EE6677\",purple=\"#AA3377\",grey=\"#BBBBBB\"}local y=\"darkslategray\"local z=tolColours.green;local A=tolColours.cyan;local B=tolColours.yellow;local C=tolColours.red;local D=\"alignBottom\"if AlignTop then D=\"alignTop\"end;local E=[[<style>\r\n.alignTop,.alignBottom,.bar{font-family:monospace;color:white;text-align:left}\r\n.alignTop,.alignBottom{display:flex;width:100vw;height:100vh;padding:2px}\r\n.alignBottom{justify-content:flex-end;align-items:flex-end;margin:auto}\r\n.bar{border-radius:4px;border:1px solid white;margin:2px;}\r\n.bar::after{content: attr(lab);font-weight:600;padding:5px}\r\ntable{width:100vw}\r\ntd,th,table{margin:0;padding:0}\r\n</style>]]local F={d1=[[<div class=\"]]..D..[[\">]],de=[[</div>]],tc=[[<table style=\"font-size:]]..contFontSize..[[vh\">]],tp=[[<table style=\"font-size:]]..assemFontSize..[[vh\">]],te=[[</table>]],tr=[[<tr>]],tr2=[[<tr style=\"background-color:]]..y..[[;\">]],tre=[[</tr>]],th=[[<th>]],thL=[[<th style=\"margin-left:20px\">]],thL2=[[<th style=\"margin-left:20px\" colspan=\"2\">]],thR=[[<th style=\"text-align:right\">]],th3=[[<th style=\"background-color:]]..y..[[;\">&nbsp;</th>]],the=[[</th>]],nbr=[[<nobr>]],nbre=[[</nobr>]]}function cell(G,g,H,I,J)local K=\"\"if H then K=K..\" text-align:\"..H..\";\"end;if I then K=K..\" color:\"..I..\";\"end;if J then K=K..\" font-size:\"..J..\";\"end;if K then K=[[ style=\"]]..K..[[\"]]end;return[[<th width=]]..G..K..[[><nobr>]]..g..[[</nobr></th>]]end;function refreshContainerDisplay(L,M)local N={}function processSubstanceContainer(O)local P=(core.getElementMassById(O.id)-O.selfMass)*(1.0+PlayerContainerOptimization/100)local Q=P/O.property.density;local R=O.substance;if O.overflow then R=\"O_\"..O.substance end;if N[R]then N[R].volume=N[R].volume+Q;N[R].contentMass=N[R].contentMass+P;N[R].capacity=N[R].capacity+O.capacity else N[R]={substance=O.substance,volume=Q,contentMass=P,capacity=O.capacity,overflow=O.overflow}end end;for u,O in pairs(e)do processSubstanceContainer(O)end;function statusColour(S,T)if T then S=100.0-S end;if S<=LowLevel then return C end;if S<=HighLevel then return B end;return z end;function barGraph(G,S,I)return[[<td width=]]..G..[[><div class=\"bar\" lab=\"]]..string.format(\"%02.1f\",S)..[[%\" style=\"background-color:]]..I..[[;width:]]..S..[[%\"/></td>]]end;function correctSpelling(g)if US_Spellings and properties[g]and properties[g].usSpelling then return properties[g].usSpelling end;return g end;function displayFormat(n,p)local g=correctSpelling(n)local R=n;if p then R=\"O_\"..n end;local U=N[R]local V=properties[n].short;if p then if V then g=V..\" Overflow\"else g=g..\" OF\"end elseif g:len()>10 and V then g=V end;if not U then if p then return nil end;return\"?\",0.0,\"kℓ\",g end;local Q=U.volume;local S=math.min(100.0*Q/U.capacity,100.0)if Q>=1000000 then return string.format(\"%02.1f\",Q/1000000),S,\"Mℓ\",g end;return string.format(\"%02.1f\",Q/1000),S,\"kℓ\",g end;function addSubstanceDisplay(W,X,S,T,Q)local I=statusColour(S,T)local Y=false;if I==C and Q~=\"?\"then Y=C end;return cell(\"18%\",W,false,Y)..cell(\"13%\",X,\"right\")..barGraph(\"17%\",S,I)end;function newHTMLRow(Z)local _,a0,a1,W=displayFormat(Z.text1,Z.overflow)if not _ then return\"\"end;local a2,a3,a4,X=displayFormat(Z.text2,Z.overflow)local a5=\"&nbsp;\"local a6=statusColour(a3,Z.overflow)local a7=false;if a6==C and a2~=\"?\"then a7=C end;return F.tr..addSubstanceDisplay(W,_..a1,a0,Z.overflow,_)..F.th..a5 ..F.the..addSubstanceDisplay(X,a2 ..a4,a3,Z.overflow,a2)..F.tre end;function newHTMLHeader(Z)return F.tr2 ..[[<th width=48% colspan=3>]]..Z.text1 ..[[</th><th/><th width=48% colspan=3>]]..Z.text1 ..[[</th>]]..F.tre end;local a8={}function addRow(a9,aa,p)a8[#a8+1]={text1=a9,text2=aa,overflow=p}end;function addHeaderRow(a9,aa)if not SkipHeadings then a8[#a8+1]={text1=a9,text2=aa,header=true}end end;addHeaderRow(\"T5 Ores\",\"T5 Pures\")addRow(\"Rhodonite\",\"Manganese\")addRow(\"Columbite\",\"Niobium\")addRow(\"Illmenite\",\"Titanium\")addRow(\"Vanadinite\",\"Vanadium\")addHeaderRow(\"T4 Ores\",\"T4 Pures\")addRow(\"Cobaltite\",\"Cobalt\")addRow(\"Cryolite\",\"Fluorine\")addRow(\"GoldNuggets\",\"Gold\")addRow(\"Kolbeckite\",\"Scandium\")addHeaderRow(\"Plastic\",\"Plastic\")addRow(\"Polycarbonate\",\"Polycalcite\")addRow(\"Polysulfide\",\"Fluoropolymer\")addHeaderRow(\"Alloys\",\"Alloys\")addRow(\"Silumin\",\"Steel\")addRow(\"AlFe\",\"CaRefCu\")addRow(\"Stainless steel\",\"Duralumin\")addHeaderRow(\"T3 Ores\",\"T3 Pures\")addRow(\"Petalite\",\"Lithium\")addRow(\"Garnierite\",\"Nickel\")addRow(\"Pyrite\",\"Sulfur\")addRow(\"Acanthite\",\"Silver\")addHeaderRow(\"T2 Ores\",\"T2 Pures\")addRow(\"Natron\",\"Sodium\")addRow(\"Malachite\",\"Copper\")addRow(\"Limestone\",\"Calcium\")addRow(\"Chromite\",\"Chromium\")addHeaderRow(\"T1 Ores\",\"T1 Pures\")addRow(\"Bauxite\",\"Aluminium\")addRow(\"Hematite\",\"Iron\")addRow(\"Coal\",\"Carbon\")addRow(\"Quartz\",\"Silicon\")addHeaderRow(\"H₂\",\"O₂\")addRow(\"Hydrogen\",\"Oxygen\")addRow(\"Hydrogen\",\"Oxygen\",true)function addDisplayRows(ab)local h=F.d1 ..F.tc;local ac=#a8-ContRowsPerScreen*ab+1;local ad=ac+ContRowsPerScreen-1;ac=math.max(ac,1)for ae=ac,ad do local Z=a8[ae]if not Z then break end;if Z.header then h=h..newHTMLHeader(Z)else h=h..newHTMLRow(Z)end;ae=ae+1 end;h=h..F.te..F.de;return h end;for af,ag in pairs(L)do local h=addDisplayRows(af)for u,ah in pairs(ag)do ah.setHTML(E..h)end end end;dataUpdates={}assemblies={}alerts={}function refreshIndustryScreens(L,M)function processData(R,M)local j=tonumber(R)if not j then return end;local ai=databank.getIntValue(j..\"_updated\")if not M and ai~=1 then return end;local aj=databank.getStringValue(j)if aj==nil or aj==\"\"then return end;local ak=json.decode(aj)if not ak or type(ak)~=\"table\"or not ak.status then return end;local k=core.getElementNameById(j)local al=core.getElementTypeById(j)if al==\"assembly line\"then local x,J=assemblySize(j)local am=\"\"if not string.find(k,\"%[\")then am=k end;assemblies[x*10000+j]={name=k,size=J,id=j,product=am,status=ak.status}else local an=al..\"_\"..k..\"_\"..j;if ak.status:find(\"JAMMED\")==1 then alerts[an]={name=k,machine=al,id=j,status=ak.status}else alerts[an]=nil end end;if ai==1 then dataUpdates[j]=1 end end;local ao=databank.getKeys()if ao==nil or ao==\"\"then return end;local ap=json.decode(ao)for u,R in ipairs(ap)do processData(R,M)end;local a8={}function addRow(a9,aa,aq,ar,I,J)a8[#a8+1]={text1=a9,text2=aa,text3=aq,text4=ar,colour=I,size=J}end;function addHeaderRow(a9,aa,aq,ar)a8[#a8+1]={text1=a9,text2=aa,text3=aq,text4=ar,header=true}end;local as={}for at in pairs(alerts)do table.insert(as,at)end;table.sort(as)addHeaderRow(\"Machine\",\"Making\",\"#\",\"Alert\")for u,at in ipairs(as)do local au=alerts[at]local I=C;local av=au.status;if av==\"JAMMED_MISSING_INGREDIENT\"then if WaitingAsAlarm then I=C else I=B end;av=\"WAITING\"elseif av==\"JAMMED_OUTPUT_FULL\"then I=C;av=\"OUTPUT FULL\"elseif av:find(\"JAMMED\")==1 then I=C end;local type=au.machine;if a[type]then type=a[type]end;addRow(type,au.name,au.id,av,I,alertFontSize)end;local aw={}for at in pairs(assemblies)do table.insert(aw,at)end;table.sort(aw)if#aw>0 then addHeaderRow(\"Assm.\",\"Making\",\"#\",\"Status\")for u,at in ipairs(aw)do local ax=assemblies[at]local I=C;local av=ax.status;if av==\"JAMMED_MISSING_INGREDIENT\"then if WaitingAsAlarm then I=C else I=B end;av=\"WAITING\"elseif av==\"RUNNING\"then I=z elseif av==\"STOPPED\"or av==\"PENDING\"then I=A elseif av:find(\"JAMMED\")==1 then I=C end;addRow(ax.size,ax.product,ax.id,av,I)end end;function newHTMLRow(Z)local K=\"\"if Z.colour then K=K..\" color:\"..Z.colour..\";\"end;if K then K=[[ style=\"]]..K..[[\"]]end;return[[<tr]]..K..[[\">\r\n]]..F.thL..[[&nbsp;</th>\r\n]]..F.thL..F.nbr..Z.text1 ..F.nbre..[[</th>\r\n]]..F.thL..F.nbr..Z.text2 ..F.nbre..[[</th>\r\n]]..F.thR..F.nbr..Z.text3 ..F.nbre..[[&nbsp;</th>\r\n]]..F.thL..F.nbr..Z.text4 ..F.nbre..[[</th>\r\n</tr>]]end;function newHTMLHeader(Z)return F.tr2 ..[[<th width=2%/><th width=23%>]]..Z.text1 ..[[</th><th>]]..Z.text2 ..[[</th><th width=8% style=\"text-align:right\">]]..Z.text3 ..[[&nbsp;</th><th width=16%>]]..Z.text4 ..F.tre end;function addDisplayRows(ab)local h=F.d1 ..F.tp;local ac=#a8-AssemRowsPerScreen*ab+1;local ad=ac+AssemRowsPerScreen-1;ac=math.max(ac,1)for ae=ac,ad do local Z=a8[ae]if not Z then break end;if Z.header then h=h..newHTMLHeader(Z)else h=h..newHTMLRow(Z)end;ae=ae+1 end;h=h..F.te..F.de;return h end;for af,ag in pairs(L)do local h=addDisplayRows(af)for u,ah in pairs(ag)do ah.setHTML(E..h)end end end;function refreshScreens(M)refreshContainerDisplay(c,M)refreshIndustryScreens(d,M)end;function processFirst()unit.stopTimer(\"First\")refreshScreens(true)end;function processDataUpdates()if not databank then return end;local ay=DataThrottle;for R,ak in pairs(dataUpdates)do ay=ay-1;if ay==0 then return end;databank.setIntValue(R..\"_updated\",0)dataUpdates[R]=nil end;if next(dataUpdates)==nil then databank.setIntValue(\"updated\",0)end end;function processTick()local az,aA=xpcall(function()refreshScreens(false)end,traceback)if not az then system.print(aA)end end;function onStop()for u,b in pairs(unit)do if slotValid(b)then if b.setHTML then b.clear()end end end end;system.print(\"InDUstry Status\")local databank=nil;onStart()unit.setTimer(\"First\",1)unit.setTimer(\"Live\",7)unit.setTimer(\"WriteData\",3)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"onStop()","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"processFirst()","filter":{"args":[{"value":"First"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"processTick()","filter":{"args":[{"value":"Live"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},{"code":"processDataUpdates()","filter":{"args":[{"value":"WriteData"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"4"}],"methods":[],"events":[]}