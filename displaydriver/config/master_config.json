{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"local a=\"V1.2.1\"\r\nPlayerContainerProficiency = 30 --export Your Container Proficiency bonus in total percent (Skills->Mining and Inventory->Inventory Manager)\r\nPlayerContainerOptimization = 0 --export Your Container Optimization bonus in total percent (Skills->Mining and Inventory->Stock Control)\r\nLowLevel = 25 --export Percent for low level indicator\r\nHighLevel = 50 --export Percent for high level indicator\r\nContainerMatch = \"C_(.+)\" --export Match for single item Storage Container names (e.g. \"C_Hematite\")\r\nOverflowMatch = \"O_(.+)\" --export Match for single item Overflow Container names (e.g. \"O_Hydrogen\")\r\nContRowsPerScreen = 20 --export Container rows per screen\r\nAssemRowsPerScreen = 16 --export Assembly rows per screen\r\nAlertRowsPerScreen = 24 -- Alert rows per screen\r\nAlignTop = false --export Align with top of screen\r\nWaitingAsAlarm = false --export Display waiting state with alarm colour\r\nKeepBlocksTogether = false  --Don't break blocks across displays\r\nDataThrottle = 15 --export Maximum writes to process each update, lower this if you get CPU overloads\r\nSkipHeadings = false --export No substance headings\r\nUS_Spellings = false --export Expect American spellings\r\ncontGap = 1.33 --export Cont Table gap\r\nprodGap = 0.4 --export Cont Table gap\r\nassemFontSize=100/AssemRowsPerScreen-prodGap;contFontSize=100/ContRowsPerScreen-contGap;properties={Bauxite={density=1.2808,ore=true},Coal={density=1.3465,ore=true},Quartz={density=2.6498,ore=true},Hematite={density=5.0398,ore=true},Chromite={density=4.54,ore=true},Malachite={density=3.9997,ore=true},Limestone={density=2.7105,ore=true},Natron={density=1.5499,ore=true},Petalite={density=2.4119,ore=true},Garnierite={density=2.6,ore=true},Acanthite={density=7.1995,ore=true},Pyrite={density=5.0098,ore=true},Cobaltite={density=6.33,ore=true},Cryolite={density=2.9495,ore=true},Kolbeckite={density=2.37,ore=true},GoldNuggets={density=19.3,ore=true,short=\"GoldNug\"},Rhodonite={density=3.76,ore=true},Columbite={density=5.38,ore=true},Illmenite={density=4.55,ore=true},Vanadinite={density=6.95,ore=true},Hydrogen={density=0.069785,short=\"H₂\"},Oxygen={density=1.0000,short=\"O₂\"},Aluminium={density=2.7,short=\"Al\",usSpelling=\"Aluminum\"},Carbon={density=2.27,short=\"C\"},Silicon={density=2.33,short=\"Si\"},Iron={density=7.85,short=\"Fe\"},Calcium={density=1.55,short=\"Ca\"},Chromium={density=7.19,short=\"Cr\"},Copper={density=8.96,short=\"Cu\"},Sodium={density=0.97,short=\"Na\"},Lithium={density=0.53,short=\"Li\"},Nickel={density=8.91,short=\"Ni\"},Silver={density=10.49,short=\"Ag\"},Sulfur={density=1.82,short=\"S\"},Cobalt={density=8.9,short=\"Co\"},Fluorine={density=1.7,short=\"Fl\"},Gold={density=19.3,short=\"Au\"},Scandium={density=2.98,short=\"Sc\"},Manganese={density=7.21,short=\"Mn\"},Niobium={density=8.57,short=\"Ni\"},Titanium={density=4.51,short=\"Ti\"},Vanadium={density=6.00,short=\"Va\"},Silumin={density=3.00},Steel={density=8.05},AlFe={density=7.50},AlLi={density=2.50},CaRefCu={density=8.10},CuAg={density=9.20},Duralumin={density=2.80},[\"Stainless steel\"]={density=7.75,short=\"S.Steel\"},Polycarbonate={density=1.4,short=\"Polycarb\"},Polycalcite={density=1.5,short=\"Polycalc\"},Polysulfide={density=1.6,short=\"Polysulf\"},Fluoropolymer={density=1.65,short=\"Fl.Poly\"}}local b={[\"electronics industry\"]=\"Elec. ind.\",[\"chemical industry\"]=\"Chem. ind.\",[\"metalworks industry\"]=\"Met. ind.\"}function slotValid(c)return c and type(c)==\"table\"and type(c.export)==\"table\"and c.getElementClass end;local d={}local e={}local f={}function onStart()function setMessage(g,h)local i=[[<div style=\"width:100vw\"><div style=\"margin-top: 20vw;padding: 10vw; font-size: 4em;width: 100vw;display: inline-block;\">]]..h..[[</div></div>]]g.setHTML(i)end;for j,c in pairs(unit)do if slotValid(c)then if c.setHTML then c.activate()setMessage(c,\"If you see this you need to rename the screens...\")elseif not databank and c.getStringValue then databank=c;databank.setIntValue(\"master\",1)elseif not core and c.getConstructId then core=c end end end;if not core then return end;for j,c in pairs(unit)do if slotValid(c)then if c.setHTML then local k=c.getId()if k then local l=core.getElementNameById(k)local type,m=string.match(l,\"(.*)Display(%d)\")if type and m then m=tonumber(m)if type==\"Cont\"then if d[m]then table.insert(d[m],c)else d[m]={c}end;setMessage(c,\"If you see this you may need to restart the master board\")elseif type==\"Prod\"then if e[m]then table.insert(e[m],c)else e[m]={c}end;setMessage(c,\"If you see this you may need to restart the master board\")end end end end end end;function extractSubstanceName(l,n)local o=string.gsub(l,n,\"\")return o end;function getBaseCointainerProperties(k)local p=core.getElementMaxHitPointsById(k)if p<=123 then return 0.0,0.0 elseif p<=998 then return 229.09,1000.0 elseif p<=7996 then return 1281.31,8000.0 elseif p<=17315 then return 7421.35,64000.0 else return 14842.7,128000.0 end end;function addContainer(k)if not core.getElementTypeById(k)==\"container\"then return end;local l=core.getElementNameById(k)if not l then return end;local q=false;local o=string.match(l,\"^\"..ContainerMatch)if not o then o=string.match(l,\"^\"..OverflowMatch)if not o then return end;q=true end;local r=properties[o]if not r then return end;local s,t=getBaseCointainerProperties(k)capacity=t*(1.0+PlayerContainerProficiency/100)f[k]={name=l,id=k,substance=o,capacity=capacity,selfMass=s,property=r,overflow=q,isHub=t==0}end;local u=core.getElementIdList()for v,k in ipairs(u)do addContainer(k)end end;local w={\"XS\",\" S\",\" M\",\" L\",\"XL\"}function assemblySize(k)local x=core.getElementMassById(k)local y=math.floor(math.log(x-90,10)+0.1)return y,w[y]end;tolColours={blue=\"#332288\",cyan=\"#66CCEE\",green=\"#228833\",yellow=\"#CCBB44\",red=\"#EE6677\",purple=\"#AA3377\",grey=\"#BBBBBB\"}local z=\"darkslategray\"local A=tolColours.green;local B=tolColours.cyan;local C=tolColours.yellow;local D=tolColours.red;local E=\"alignBottom\"if AlignTop then E=\"alignTop\"end;local F=[[<style>\r\n.alignTop,.alignBottom,.bar{font-family:monospace;color:white;text-align:left}\r\n.alignTop,.alignBottom{display:flex;width:100vw;height:100vh;padding:2px}\r\n.alignBottom{justify-content:flex-end;align-items:flex-end;margin:auto}\r\n.bar{border-radius:4px;border:1px solid white;margin:2px;}\r\n.bar::after{content: attr(lab);font-weight:600;padding:5px}\r\ntable{width:100vw}\r\ntd,th,table{margin:0;padding:0}\r\n</style>]]local G={d1=[[<div class=\"]]..E..[[\">]],de=[[</div>]],tc=[[<table style=\"font-size:]]..contFontSize..[[vh\">]],tp=[[<table style=\"font-size:]]..assemFontSize..[[vh\">]],te=[[</table>]],tr=[[<tr>]],tr2=[[<tr style=\"background-color:]]..z..[[;\">]],tre=[[</tr>]],th=[[<th>]],thL=[[<th style=\"margin-left:20px\">]],thL2=[[<th style=\"margin-left:20px\" colspan=\"2\">]],thR=[[<th style=\"text-align:right\">]],th3=[[<th style=\"background-color:]]..z..[[;\">&nbsp;</th>]],the=[[</th>]],nbr=[[<nobr>]],nbre=[[</nobr>]]}function cell(H,h,I,J,K)local L=\"\"if I then L=L..\" text-align:\"..I..\";\"end;if J then L=L..\" color:\"..J..\";\"end;if K then L=L..\" font-size:\"..K..\";\"end;if L then L=[[ style=\"]]..L..[[\"]]end;return[[<th width=]]..H..L..[[><nobr>]]..h..[[</nobr></th>]]end;function refreshContainerDisplay(M,N)local O={}function processSubstanceContainer(P)local Q=(core.getElementMassById(P.id)-P.selfMass)*(1.0+PlayerContainerOptimization/100)local R=Q/P.property.density;local S=P.substance;if P.overflow then S=\"O_\"..P.substance end;if O[S]then O[S].volume=O[S].volume+R;O[S].contentMass=O[S].contentMass+Q;O[S].capacity=O[S].capacity+P.capacity else O[S]={substance=P.substance,volume=R,contentMass=Q,capacity=P.capacity,overflow=P.overflow}end end;for v,P in pairs(f)do processSubstanceContainer(P)end;function statusColour(T,U)if U then T=100.0-T end;if T<=LowLevel then return D end;if T<=HighLevel then return C end;return A end;function barGraph(H,T,J)return[[<td width=]]..H..[[><div class=\"bar\" lab=\"]]..string.format(\"%02.1f\",T)..[[%\" style=\"background-color:]]..J..[[;width:]]..T..[[%\"/></td>]]end;function correctSpelling(h)if US_Spellings and properties[h]and properties[h].usSpelling then return properties[h].usSpelling end;return h end;function displayFormat(o,q)local h=correctSpelling(o)local S=o;if q then S=\"O_\"..o end;local V=O[S]local W=properties[o].short;if q then if W then h=W..\" Overflow\"else h=h..\" OF\"end elseif h:len()>10 and W then h=W end;if not V then if q then return nil end;return\"?\",0.0,\"kℓ\",h end;local R=V.volume;local T=math.min(100.0*R/V.capacity,100.0)if R>=1000000 then return string.format(\"%02.1f\",R/1000000),T,\"Mℓ\",h end;return string.format(\"%02.1f\",R/1000),T,\"kℓ\",h end;function addSubstanceDisplay(X,Y,T,U,R)local J=statusColour(T,U)local Z=false;if J==D and R~=\"?\"then Z=D end;return cell(\"18%\",X,false,Z)..cell(\"13%\",Y,\"right\")..barGraph(\"17%\",T,J)end;function newHTMLRow(_)local a0,a1,a2,X=displayFormat(_.text1,_.overflow)if not a0 then return\"\"end;local a3,a4,a5,Y=displayFormat(_.text2,_.overflow)local a6=\"&nbsp;\"local a7=statusColour(a4,_.overflow)local a8=false;if a7==D and a3~=\"?\"then a8=D end;return G.tr..addSubstanceDisplay(X,a0 ..a2,a1,_.overflow,a0)..G.th..a6 ..G.the..addSubstanceDisplay(Y,a3 ..a5,a4,_.overflow,a3)..G.tre end;function newHTMLHeader(_)return G.tr2 ..[[<th width=48% colspan=3>]].._.text1 ..[[</th><th/><th width=48% colspan=3>]].._.text2 ..[[</th>]]..G.tre end;local a9={}function addRow(aa,ab,q)a9[#a9+1]={text1=aa,text2=ab,overflow=q}end;function addHeaderRow(aa,ab)if not SkipHeadings then a9[#a9+1]={text1=aa,text2=ab,header=true}end end;addHeaderRow(\"T5 Ores\",\"T5 Pures\")addRow(\"Rhodonite\",\"Manganese\")addRow(\"Columbite\",\"Niobium\")addRow(\"Illmenite\",\"Titanium\")addRow(\"Vanadinite\",\"Vanadium\")addHeaderRow(\"T4 Ores\",\"T4 Pures\")addRow(\"Cobaltite\",\"Cobalt\")addRow(\"Cryolite\",\"Fluorine\")addRow(\"GoldNuggets\",\"Gold\")addRow(\"Kolbeckite\",\"Scandium\")addHeaderRow(\"Plastic\",\"Plastic\")addRow(\"Polycarbonate\",\"Polycalcite\")addRow(\"Polysulfide\",\"Fluoropolymer\")addHeaderRow(\"Alloys\",\"Alloys\")addRow(\"Silumin\",\"Steel\")addRow(\"AlFe\",\"CaRefCu\")addRow(\"Stainless steel\",\"Duralumin\")addHeaderRow(\"T3 Ores\",\"T3 Pures\")addRow(\"Petalite\",\"Lithium\")addRow(\"Garnierite\",\"Nickel\")addRow(\"Pyrite\",\"Sulfur\")addRow(\"Acanthite\",\"Silver\")addHeaderRow(\"T2 Ores\",\"T2 Pures\")addRow(\"Natron\",\"Sodium\")addRow(\"Malachite\",\"Copper\")addRow(\"Limestone\",\"Calcium\")addRow(\"Chromite\",\"Chromium\")addHeaderRow(\"T1 Ores\",\"T1 Pures\")addRow(\"Bauxite\",\"Aluminium\")addRow(\"Hematite\",\"Iron\")addRow(\"Coal\",\"Carbon\")addRow(\"Quartz\",\"Silicon\")addHeaderRow(\"H₂\",\"O₂\")addRow(\"Hydrogen\",\"Oxygen\")addRow(\"Hydrogen\",\"Oxygen\",true)function addDisplayRows(ac)local i=G.d1 ..G.tc;local ad=#a9-ContRowsPerScreen*ac+1;local ae=ad+ContRowsPerScreen-1;ad=math.max(ad,1)for af=ad,ae do local _=a9[af]if not _ then break end;if _.header then i=i..newHTMLHeader(_)else i=i..newHTMLRow(_)end;af=af+1 end;i=i..G.te..G.de;return i end;for ag,ah in pairs(M)do local i=addDisplayRows(ag)for v,ai in pairs(ah)do ai.setHTML(F..i)end end end;dataUpdates={}assemblies={}alerts={}function refreshIndustryScreens(M,N)function processData(S,N)local k=tonumber(S)if not k then return end;local aj=databank.getIntValue(k..\"_updated\")if not N and aj~=1 then return end;local ak=databank.getStringValue(k)if ak==nil or ak==\"\"then return end;local al=json.decode(ak)if not al or type(al)~=\"table\"or not al.status then return end;local l=core.getElementNameById(k)local am=core.getElementTypeById(k)if am==\"assembly line\"then local y,K=assemblySize(k)local an=\"\"if not string.find(l,\"%[\")then an=l end;assemblies[y*10000+k]={name=l,size=K,id=k,product=an,status=al.status}else local ao=am..\"_\"..l..\"_\"..k;if al.status:find(\"JAMMED\")==1 then alerts[ao]={name=l,machine=am,id=k,status=al.status}else alerts[ao]=nil end end;if aj==1 then dataUpdates[k]=1 end end;local ap=databank.getKeys()if ap==nil or ap==\"\"then return end;local aq=json.decode(ap)for v,S in ipairs(aq)do processData(S,N)end;local a9={}function addRow(aa,ab,ar,as,J,K)a9[#a9+1]={text1=aa,text2=ab,text3=ar,text4=as,colour=J,size=K}end;function addHeaderRow(aa,ab,ar,as)a9[#a9+1]={text1=aa,text2=ab,text3=ar,text4=as,header=true}end;local at={}for au in pairs(alerts)do table.insert(at,au)end;table.sort(at)addHeaderRow(\"Machine\",\"Making\",\"#\",\"Alert\")for v,au in ipairs(at)do local av=alerts[au]local J=D;local aw=av.status;if aw==\"JAMMED_MISSING_INGREDIENT\"then if WaitingAsAlarm then J=D else J=C end;aw=\"WAITING\"elseif aw==\"JAMMED_OUTPUT_FULL\"then J=D;aw=\"OUTPUT FULL\"elseif aw:find(\"JAMMED\")==1 then J=D end;local type=av.machine;if b[type]then type=b[type]end;addRow(type,av.name,av.id,aw,J,alertFontSize)end;local ax={}for au in pairs(assemblies)do table.insert(ax,au)end;table.sort(ax)if#ax>0 then addHeaderRow(\"Assm.\",\"Making\",\"#\",\"Status\")for v,au in ipairs(ax)do local ay=assemblies[au]local J=D;local aw=ay.status;if aw==\"JAMMED_MISSING_INGREDIENT\"then if WaitingAsAlarm then J=D else J=C end;aw=\"WAITING\"elseif aw==\"RUNNING\"then J=A elseif aw==\"STOPPED\"or aw==\"PENDING\"then J=B elseif aw:find(\"JAMMED\")==1 then J=D end;addRow(ay.size,ay.product,ay.id,aw,J)end end;function newHTMLRow(_)local L=\"\"if _.colour then L=L..\" color:\".._.colour..\";\"end;if L then L=[[ style=\"]]..L..[[\"]]end;return[[<tr]]..L..[[\">\r\n]]..G.thL..[[&nbsp;</th>\r\n]]..G.thL..G.nbr.._.text1 ..G.nbre..[[</th>\r\n]]..G.thL..G.nbr.._.text2 ..G.nbre..[[</th>\r\n]]..G.thR..G.nbr.._.text3 ..G.nbre..[[&nbsp;</th>\r\n]]..G.thL..G.nbr.._.text4 ..G.nbre..[[</th>\r\n</tr>]]end;function newHTMLHeader(_)return G.tr2 ..[[<th width=2%/><th width=23%>]].._.text1 ..[[</th><th>]].._.text2 ..[[</th><th width=8% style=\"text-align:right\">]].._.text3 ..[[&nbsp;</th><th width=16%>]].._.text4 ..G.tre end;function addDisplayRows(ac)local i=G.d1 ..G.tp;local ad=#a9-AssemRowsPerScreen*ac+1;local ae=ad+AssemRowsPerScreen-1;ad=math.max(ad,1)for af=ad,ae do local _=a9[af]if not _ then break end;if _.header then i=i..newHTMLHeader(_)else i=i..newHTMLRow(_)end;af=af+1 end;i=i..G.te..G.de;return i end;for ag,ah in pairs(M)do local i=addDisplayRows(ag)for v,ai in pairs(ah)do ai.setHTML(F..i)end end end;function refreshScreens(N)refreshContainerDisplay(d,N)refreshIndustryScreens(e,N)end;function processFirst()unit.stopTimer(\"First\")refreshScreens(true)end;function processDataUpdates()if not databank then return end;local az=DataThrottle;for S,al in pairs(dataUpdates)do az=az-1;if az==0 then return end;databank.setIntValue(S..\"_updated\",0)dataUpdates[S]=nil end;if next(dataUpdates)==nil then databank.setIntValue(\"updated\",0)end end;function processTick()local aA,aB=xpcall(function()refreshScreens(false)end,traceback)if not aA then system.print(aB)end end;function onStop()for v,c in pairs(unit)do if slotValid(c)then if c.setHTML then c.clear()end end end end;system.print(\"InDUstry Status \"..a)local databank=nil;onStart()unit.setTimer(\"First\",1)unit.setTimer(\"Live\",7)unit.setTimer(\"WriteData\",3)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"onStop()","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"processFirst()","filter":{"args":[{"value":"First"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"processTick()","filter":{"args":[{"value":"Live"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},{"code":"processDataUpdates()","filter":{"args":[{"value":"WriteData"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"4"}],"methods":[],"events":[]}